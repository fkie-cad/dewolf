extern unsigned long program_name = 0UL;
extern unsigned long * stderr = 0UL;
extern unsigned long * stdout = 0UL;
extern const unsigned char data_b00a[0x2] = "\x5B\x00";

struct _IO_FILE {
    int _flags;
    char * _IO_read_ptr;
    char * _IO_read_end;
    char * _IO_read_base;
    char * _IO_write_base;
    char * _IO_write_ptr;
    char * _IO_write_end;
    char * _IO_buf_base;
    char * _IO_buf_end;
    char * _IO_save_base;
    char * _IO_backup_base;
    char * _IO_save_end;
    _IO_marker * _markers;
    _IO_FILE * _chain;
    int _fileno;
    int _flags2;
    long _old_offset;
    unsigned short _cur_column;
    char _vtable_offset;
    char [1] _shortbuf;
    _IO_lock_t * _lock;
    long _offset;
    _IO_codecvt * _codecvt;
    _IO_wide_data * _wide_data;
    _IO_FILE * _freeres_list;
    void * _freeres_buf;
    unsigned long __pad5;
    int _mode;
    char [20] _unused2;
};
struct _IO_marker {
    void * _next;
    void * _sbuf;
    int _pos;
};
struct _IO_lock_t {
    int lock;
    int cnt;
    void * owner;
};
struct _IO_codecvt {
    _IO_iconv_t __cd_in;
    _IO_iconv_t __cd_out;
};
struct _IO_iconv_t {
    __gconv_step * step;
    __gconv_step_data step_data;
};
struct __gconv_step {
    void * __shlib_handle;
    char * __modname;
    int __counter;
    char * __from_name;
    char * __to_name;
    void __fct;
    unsigned int(void *, unsigned char) * __btowc_fct;
    int(void *) * __init_fct;
    void(void *) * __end_fct;
    int __min_needed_from;
    int __max_needed_from;
    int __min_needed_to;
    int __max_needed_to;
    int __stateful;
    void * __data;
};
struct __gconv_step_data {
    unsigned char * __outbuf;
    unsigned char * __outbufend;
    int __flags;
    int __invocation_counter;
    int __internal_use;
    __mbstate_t * __statep;
    __mbstate_t __state;
};
struct __mbstate_t {
    int __count;
    union __value {
        unsigned int __wch;
        char [4] __wchb;
    };
};
union __value {
    unsigned int __wch;
    char [4] __wchb;
};
struct _IO_wide_data {
    int * _IO_read_ptr;
    int * _IO_read_end;
    int * _IO_read_base;
    int * _IO_write_base;
    int * _IO_write_ptr;
    int * _IO_write_end;
    int * _IO_buf_base;
    int * _IO_buf_end;
    int * _IO_save_base;
    int * _IO_backup_base;
    int * _IO_save_end;
    __mbstate_t _IO_state;
    __mbstate_t _IO_last_state;
    _IO_codecvt _codecvt;
    int [1] _shortbuf;
    void * _wide_vtable;
};

void usage(int arg1) {
    char* var_64;
    unsigned char* var_63;
    bool var_66;
    bool var_67;
    unsigned long var_72;
    long counter;
    long var_69;
    long var_70;
    long var_71;
    void * var_68;
    unsigned long * var_65;
    char * var_57;
    char * var_58;
    char * var_59;
    char * var_60;
    void ** var_61;
    void ** var_62;
    var_57 = program_name;
    if (arg1 != 0) {
        var_58 = dcgettext(/* domainname */ 0UL, /* msgid */ "Try '%s --help' for more information.\n", /* category */ 5);
        var_65 = stderr;
        __fprintf_chk(/* fp */ var_65, /* flag */ 1, /* format */ var_58, var_57);
    }
    else {
        var_58 = dcgettext(/* domainname */ 0UL, /* msgid */ "Usage: %s [OPTION]... MODE[,MODE]... FILE...\n  or:  %s [OPTION]... OCTAL-MODE FILE...\n  or:  %s [OPTION]... --reference=RFILE ", /* category */ 5);
        __printf_chk(/* flag */ 1, /* format */ var_58, var_57, var_57, var_57);
        var_57 = dcgettext(/* domainname */ 0UL, /* msgid */ "Change the mode of each FILE to MODE.\nWith --reference, change the mode of each FILE to that of RFILE.\n\n", /* category */ 5);
        var_65 = stdout;
        fputs_unlocked(/* str */ var_57, /* fp */ var_65);
        var_57 = dcgettext(/* domainname */ 0UL, /* msgid */ "  -c, --changes          like verbose but report only when a change is made\n  -f, --silent, --quiet  suppress most error messag", /* category */ 5);
        var_65 = stdout;
        fputs_unlocked(/* str */ var_57, /* fp */ var_65);
        var_57 = dcgettext(/* domainname */ 0UL, /* msgid */ "      --no-preserve-root  do not treat '/' specially (the default)\n      --preserve-root    fail to operate recursively on '/'\", /* category */ 5);
                                            var_65 = stdout;
                                            fputs_unlocked(/* str */ var_57, /* fp */ var_65);
                                            var_57 = dcgettext(/* domainname */ 0UL, /* msgid */ "      --reference=RFILE  use RFILE's mode instead of MODE values\n", /* category */ 5);
                                            var_65 = stdout;
                                            fputs_unlocked(/* str */ var_57, /* fp */ var_65);
                                            var_57 = dcgettext(/* domainname */ 0UL, /* msgid */ "  -R, --recursive        change files and directories recursively\n", /* category */ 5);
                                            var_65 = stdout;
                                            fputs_unlocked(/* str */ var_57, /* fp */ var_65);
                                            var_57 = dcgettext(/* domainname */ 0UL, /* msgid */ "      --help     display this help and exit\n", /* category */ 5);
                                            var_65 = stdout;
                                            fputs_unlocked(/* str */ var_57, /* fp */ var_65);
                                            var_57 = dcgettext(/* domainname */ 0UL, /* msgid */ "      --version  output version information and exit\n", /* category */ 5);
                                            var_65 = stdout;
                                            fputs_unlocked(/* str */ var_57, /* fp */ var_65);
                                            var_57 = dcgettext(/* domainname */ 0UL, /* msgid */ "\nEach MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.\n", /* category */ 5);
                                            var_65 = stdout;
                                            fputs_unlocked(/* str */ var_57, /* fp */ var_65);
                                            var_63 = data_b00a;
                                            var_64 = "test invocation";
        var_61 = &var_63; while (true) {
        var_68 = var_61 + 16L;
        var_57 = *var_68;
        var_62 = var_61 + 16L;
        var_67 = *var_68 == 0L;
        if (*var_68 == 0L) {
                break;
            }
            var_58 = "chmod";
            counter = 6L;
            var_66 = false;
            while (counter != 0L) {
                var_66 = *var_58 < *var_57;
                var_67 = *var_58 == *var_57;
                var_59 = var_58 + 1;
                var_60 = var_57 + 1;
                counter--;
                if (*var_58 != *var_57) {
                    break;
                }
                var_58 = var_59;
                var_57 = var_60;
            }
            if ((~var_67 & ~var_66) - var_66 == 0) {
                break;
            }
            var_61 = var_62;
        }
        var_68 = var_61 + 0x18;
        var_57 = *var_68; if (*var_68 != 0L) {
        var_58 = dcgettext(/* domainname */ 0UL, /* msgid */ "\n%s online help: <%s>\n", /* category */ 5);
            var_70, var_69, var_72, var_71 = __printf_chk(/* flag */ 1, /* format */ var_58, "GNU coreutils", "https://www.gnu.org/software/coreutils/");
            var_58 = setlocale(/* category */ 5, /* locale */ 0UL, var_69, var_70, var_72, var_71, /* category */ var_63, /* category */ var_64);
            if (var_58 != 0L) {
                var_58 = strncmp(var_58, "en_", 3UL);
            }
        }
        else {
            var_57 = dcgettext(/* domainname */ 0UL, /* msgid */ "\n%s online help: <%s>\n", /* category */ 5);
            var_70, var_69, var_72, var_71 = __printf_chk(/* flag */ 1, /* format */ var_57, "GNU coreutils", "https://www.gnu.org/software/coreutils/");
            var_57 = setlocale(/* category */ 5, /* locale */ 0UL, var_69, var_70, var_72, var_71, /* category */ var_63, /* category */ var_64);
            if (var_57 != 0L) {
                var_57 = strncmp(var_57, "en_", 3UL);
                if (var_57 != 0) {
                    var_57 = "chmod";
                }
            }
        }
        if ((*var_68 == 0L) && ((var_57 == 0L) || (var_57 == 0))) {
        var_58 = dcgettext(/* domainname */ 0UL, /* msgid */ "Full documentation <%s%s>\n", /* category */ 5);
            var_57 = "chmod";
            __printf_chk(/* flag */ 1, /* format */ var_58, "https://www.gnu.org/software/coreutils/", "chmod");
            var_58 = "Multi-call invocation";
        }
        else {
            if ((*var_68 == 0L) || ((var_58 != 0) && (var_58 != 0L))) {
                var_58 = dcgettext(/* domainname */ 0UL, /* msgid */ "Report any translation bugs to <https://translationproject.org/team/>\n", /* category */ 5);
                var_65 = stdout;
                fputs_unlocked(/* str */ var_58, /* fp */ var_65);
            }
            var_59 = dcgettext(/* domainname */ 0UL, /* msgid */ "Full documentation <%s%s>\n", /* category */ 5);
            var_58 = "Multi-call invocation";
            __printf_chk(/* flag */ 1, /* format */ var_59, "https://www.gnu.org/software/coreutils/", "chmod");
            if (var_57 != "chmod") {
                var_58 = "Written by %s, %s, and %s.\n";
            }
        }
        var_59 = dcgettext(/* domainname */ 0UL, /* msgid */ "or available locally via: info '(coreutils) %s%s'\n", /* category */ 5);
                 __printf_chk(/* flag */ 1, /* format */ var_59, var_57, var_58);
    }
    exit(/* status */ arg1);
}
17.202858100179583